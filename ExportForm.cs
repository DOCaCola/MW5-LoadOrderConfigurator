using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.Versioning;
using System.Text;
using System.Text.Json.Nodes;
using System.Windows.Forms;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace MW5_Mod_Manager
{
    [SupportedOSPlatform("windows")]
    public partial class ExportForm : Form
    {
        public ExportForm()
        {
            InitializeComponent();
        }

        private void ExportWindow_Load(object sender, EventArgs e)
        {
            toolStrip1.Renderer = new ToolStripTransparentRenderer();

            Font monospaceFont = Utils.CreateBestAvailableMonospacePlatformFont(textBoxData.Font.Size);
            if (monospaceFont != null)
            {
                textBoxData.Font = monospaceFont;
            }

            RefreshList();
        }

        // LOM Format
        private string CreateLegacyJsonList()
        {
            Dictionary<string, bool> FolderNameModList = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);

            //Get the folder names from the paths in modlist
            foreach (string key in ModsManager.Instance.ModEnabledList.Keys)
            {
                bool isEnabled = ModsManager.Instance.ModEnabledList[key];
                if (!isEnabled)
                    continue;
                string folderName = ModsManager.Instance.PathToDirNameDict[key];
                FolderNameModList[folderName] = isEnabled;
            }

            string json = JsonConvert.SerializeObject(FolderNameModList, Formatting.Indented);

            return json;
        }


        private string CreateShortJson()
        {
            List<string> modNameList = new List<string>();

            //Get the folder names from the paths in modlist
            foreach (string key in ModsManager.Instance.ModEnabledList.Keys)
            {
                bool isEnabled = ModsManager.Instance.ModEnabledList[key];
                if (!isEnabled)
                    continue;

                modNameList.Add(ModsManager.Instance.ModDetails[key].displayName);
            }

            JObject jsonObject = new JObject();
            jsonObject["modNames"] = JArray.FromObject(modNameList);
            string json = jsonObject.ToString(Formatting.None);
            return json;
        }


        private string CreateHumanReadableList()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("« Generated by MW5 Load Order Configurator " + MainForm.Instance.GetVersion() + " for MW5Mercs. »\r\n\r\n");

            int maxDigitsOlo = 0;
            int maxDigitsClo = 0;
            bool anyEnabled = false;
            foreach (string key in ModsManager.Instance.ModEnabledList.Keys)

            {
                bool isEnabled = ModsManager.Instance.ModEnabledList[key];
                if (!isEnabled)
                    continue;

                anyEnabled = true;

                int currentLoadOrder = (int)ModsManager.Instance.Mods[key].NewLoadOrder;
                int cloDigits = currentLoadOrder.Digits();
                if (cloDigits > maxDigitsClo)
                    maxDigitsClo = cloDigits;

                int newLoadOrder = (int)ModsManager.Instance.Mods[key].OriginalLoadOrder;
                int oloDigits = newLoadOrder.Digits();
                if (oloDigits > maxDigitsOlo)
                    maxDigitsOlo = oloDigits;
            }

            if (!anyEnabled)
            {
                toolStripButtonSaveToFile.Enabled = false;
                toolStripButtonCopy.Enabled = false;
                return "No enabled mods.";
            }

            const string titleClo = "LO";
            const string titleOlo = "oLO";

            if (maxDigitsClo < titleClo.Length)
                maxDigitsClo = titleClo.Length;

            if (maxDigitsOlo < titleOlo.Length)
                maxDigitsOlo = titleOlo.Length;

            // Print column titles
            sb.Append(titleClo.PadRight(maxDigitsClo));
            sb.Append("   ");
            sb.Append(titleOlo.PadLeft(maxDigitsOlo));
            sb.Append("   Mod\r\n");

            foreach (string key in ModsManager.Instance.ModEnabledList.Keys.ReverseIterateIf(LocSettings.Instance.Data.ListSortOrder == eSortOrder.LowToHigh))
            {
                // Create a human readable string in the format
                // 58   420   "Super Test Mod" 3.1.2(357) by The Modder
                bool isEnabled = ModsManager.Instance.ModEnabledList[key];
                if (!isEnabled)
                    continue;

                int originalLoadOrder = (int)ModsManager.Instance.Mods[key].OriginalLoadOrder;
                int currentLoadOrder = (int)ModsManager.Instance.Mods[key].NewLoadOrder;

                var modDetails = ModsManager.Instance.ModDetails[key];

                sb.Append(currentLoadOrder.ToString().PadLeft(maxDigitsClo));
                sb.Append("   ");
                sb.Append(originalLoadOrder.ToString().PadLeft(maxDigitsOlo));
                sb.Append("   ");

                string versionString = System.Net.WebUtility.UrlEncode(modDetails.version);

                // Escape all ' in display name
                string escapedModDisplayName = modDetails.displayName.Replace("\"", "\"\"");
                string line = $"\"{escapedModDisplayName}\" {versionString}({modDetails.buildNumber}) by {modDetails.author}\r\n";
                sb.Append(line);
            }

            sb.Append("\r\n« End of load order. »");
            return sb.ToString();
        }

        private void RefreshList()
        {
            textBoxData.Text = CreateHumanReadableList();
        }

        private void buttonCancel_Click(object sender, EventArgs e)
        {
            Close();
        }

        private void ToolStripButtonSaveToFileClick(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Title = "Save load order file";
            saveFileDialog.Filter = "Text files|*.txt";
            saveFileDialog.FileName = "locLoadOrder.txt";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                File.WriteAllText(saveFileDialog.FileName, textBoxData.Text);
            }
        }

        private void toolStripButtonCopy_Click(object sender, EventArgs e)
        {
            ClipboardUtils.ClipboardHelper.CopyTextToClipboard(textBoxData.Text);
        }

        private void textBoxData_TextChanged(object sender, EventArgs e)
        {
            labelCharCount.Text = textBoxData.Text.Length.ToString() + " characters";
        }
    }
}